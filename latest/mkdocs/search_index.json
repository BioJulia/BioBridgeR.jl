{
    "docs": [
        {
            "location": "/", 
            "text": "BioBridgeR.jl \nCompatibility between R classes and BioJulia types for bioinformatics\n\n\nLatest release:\n\n\n \n \n \n \n\n\nDevelopment status:\n\n\n \n \n \n\n\n\n\nDescription\n\n\nBioBridgeR.jl provides submodules providing compatibility with biology and bioinformatics R packages by extending \nRCall.jl\n.\n\n\nEach submodule is dedicated to one R package. Each submodule allows you to send BioJulia datatypes from a julia session to an R session, automatically converting them to an object of the relevant class from that R package. Conversely, objects of a class defined in the given R package can be transferred from the R session to a julia session, whilst automatically converting them to the relevant BioJulia data type.\n\n\n\n\nInstallation\n\n\nInstall BioBridgeR from the Julia REPL:\n\n\njulia\n \nPkg\n.\nadd\n(\nBioBridgeR\n)\n\n\n\n\n\n\nIf you are interested in the cutting edge of the development, please check out the master branch to try new features before release.", 
            "title": "Home"
        }, 
        {
            "location": "/#biobridgerjl-compatibility-between-r-classes-and-biojulia-types-for-bioinformatics", 
            "text": "Latest release:           Development status:", 
            "title": "BioBridgeR.jl Compatibility between R classes and BioJulia types for bioinformatics"
        }, 
        {
            "location": "/#description", 
            "text": "BioBridgeR.jl provides submodules providing compatibility with biology and bioinformatics R packages by extending  RCall.jl .  Each submodule is dedicated to one R package. Each submodule allows you to send BioJulia datatypes from a julia session to an R session, automatically converting them to an object of the relevant class from that R package. Conversely, objects of a class defined in the given R package can be transferred from the R session to a julia session, whilst automatically converting them to the relevant BioJulia data type.", 
            "title": "Description"
        }, 
        {
            "location": "/#installation", 
            "text": "Install BioBridgeR from the Julia REPL:  julia   Pkg . add ( BioBridgeR )   If you are interested in the cutting edge of the development, please check out the master branch to try new features before release.", 
            "title": "Installation"
        }, 
        {
            "location": "/ape/", 
            "text": "Submodule: APE\n\n\nThe APE submodule provides compatibility with the R package called \nAPE\n.\n\n\nAPE is an R package for phylogenetic and evolutionary analyses.\n\n\nCurrently compatibility with the following R classes is provided:\n\n\n\n\nDNAbin\n\n\nAPE provides a \nDNAbin\n class which represents DNA sequences using a byte per nucleotide, with a specific binary encoding. We currently provide support for the matrix form of \nDNAbin\n.\n\n\nThe \nBioBridgeR.APE\n provides a bitstype of \nDNAbin\n which inherits from the abstract type \nNucleicAcid\n from \nBioSymbols.jl\n. \nBioBridgeR.APE.DNAbin\n variables then can be created and used to represent nucleic acid data, just as you can with the \nDNA\n and \nRNA\n defined in BioSymbols.jl. They work with the methods defined in BioSymbols.jl:\n\n\njulia\n using BioSequences, RCall, BioBridgeR.APE\nWARNING: Method definition promote_rule(Type{IntervalSets.ClosedInterval{T}}, Type{IntervalSets.ClosedInterval{S}}) in module IntervalSets at /home/travis/.julia/v0.6/IntervalSets/src/closed.jl:86 overwritten in module AxisArrays at /home/travis/.julia/v0.6/AxisArrays/src/intervals.jl:23.\nWARNING: Method definition ==(Base.Nullable{S}, Base.Nullable{T}) in module Base at nullable.jl:238 overwritten in module NullableArrays at /home/travis/.julia/v0.6/NullableArrays/src/operators.jl:128.\n\njulia\n ispurine(DNAbin_A)\ntrue\n\njulia\n complement(DNAbin_G)\nDNAbin_C\n\n\n\n\n\nDNAbin\n symbols can also be created from text and converted to text just as \nDNA\n and \nRNA\n symbols can be.\n\n\njulia\n DNAbin(\nt\n)\nDNAbin_T\n\njulia\n Char(DNAbin_Gap)\n\n-\n: ASCII/Unicode U+002d (category Pd: Punctuation, dash)\n\n\n\n\n\nDNAbin\n symbols can also be created from text and converted to text just as \nDNA\n and \nRNA\n symbols can be.\n\n\njulia\n DNAbin(DNA_N)\nDNAbin_N\n\njulia\n DNA(DNA_R)\nDNA_R\n\n\n\n\n\nDNA sequences in R, represented as a \nDNAbin\n object can be transferred into a julia as an \nArray{DNAbin,2}\n, or (by default) as a \nBioSequence{DNAAlphabet{4}}\n type as defined in \nBioSequences.jl\n:\n\n\njulia\n R\n\n       library(ape)\n       data(woodmouse)\n       \n\nRCall.RObject{RCall.StrSxp}\n[1] \nwoodmouse\n\n\njulia\n @rget woodmouse::Array{DNAbin,2}\n15\u00d7965 Array{BioBridgeR.APE.DNAbin,2}:\n DNAbin_N  DNAbin_T  DNAbin_T  DNAbin_C  \u2026  DNAbin_A  DNAbin_T  DNAbin_A\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_G  DNAbin_T  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_A  DNAbin_T  DNAbin_A\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C  \u2026  DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C  \u2026  DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_N  DNAbin_N  DNAbin_N  DNAbin_N     DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_N  DNAbin_N  DNAbin_N  DNAbin_C     DNAbin_N  DNAbin_N  DNAbin_N\n\njulia\n @rget woodmouse\n15-element Array{BioSequences.BioSequence{BioSequences.DNAAlphabet{4}},1}:\n NTTCGAAAAACACACCCACTACTAAAANTTATCAGTCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAGACCCTATA\n ATTCGAAAAACACACCCACTACTAAAAATTATCAACCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCTGTN\n ATTCGAAAAACACACCCACTACTAAAAATTATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCTATA\n ATTCGAAAAACACACCCACTACTAAAAATCATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAATACNNNN\n ATTCGAAAAACACACCCACTACTAAAAATTATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n ATTCGAAAAACACACCCACTACTAAAAATTATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n ATTCGAAAAACACACCCACTACTAAAAATTATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n ATTCGAAAAACACACCCACTACTAAAAATTATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n ATTCGAAAAACACACCCACTACTAAAAATTATCAACCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n ATTCGAAAAACACACCCACTACTAAAAATTATTAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n ATTCGAAAAACACACCCACTACTAAAAATTATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n ATTCGAAAAACACACCCACTACTAAAAATTATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n ATTCGAAAAACACACCCACTACTAAAAATTATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n NNNCGAAAAACACACCCACTACTAAAAATTATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n\n\n\n\n\nConversely, \nArray{DNAbin, 2}\n and \nBioSequence{DNAAlphabet{4}}\n variables can be transferred over from the julia session to the R session as a \nDNAbin\n object. Note that currently you have to explicitly specify that it must be converted to a \nRawSxp\n (the structure R uses to store binary data as \nDNAbin\n does, indeed \nDNAbin\n variables are arrays of bytes with specific behaviour).\n\n\njulia\n \nsequences\n \n=\n \nDNASequence\n[\ndna\nAAAAA\n,\n \ndna\nTTTTT\n,\n \ndna\nCCCCC\n,\n \ndna\nGGGGG\n]\n\n\n4\n-\nelement\n \nArray\n{\nBioSequences\n.\nBioSequence\n{\nBioSequences\n.\nDNAAlphabet\n{\n4\n}},\n1\n}\n:\n\n \nAAAAA\n\n \nTTTTT\n\n \nCCCCC\n\n \nGGGGG\n\n\n\njulia\n \n@\nrput\n \nsequences\n::\nRawSxp\n\n\nPtr\n{\nRCall\n.\nRawSxp\n}\n \n@0x00000000070d14c8\n\n\n\njulia\n \nR\nsequences\n\n\nRCall\n.\nRObject\n{\nRCall\n.\nRawSxp\n}\n\n\n4\n \nDNA\n \nsequences\n \nin\n \nbinary\n \nformat\n \nstored\n \nin\n \na\n \nmatrix\n.\n\n\n\nAll\n \nsequences\n \nof\n \nsame\n \nlength\n:\n \n5\n\n\n\nLabels\n:\n\n\n\nBase\n \ncomposition\n:\n\n   \na\n    \nc\n    \ng\n    \nt\n\n\n0.25\n \n0.25\n \n0.25\n \n0.25", 
            "title": "APE"
        }, 
        {
            "location": "/ape/#submodule-ape", 
            "text": "The APE submodule provides compatibility with the R package called  APE .  APE is an R package for phylogenetic and evolutionary analyses.  Currently compatibility with the following R classes is provided:", 
            "title": "Submodule: APE"
        }, 
        {
            "location": "/ape/#dnabin", 
            "text": "APE provides a  DNAbin  class which represents DNA sequences using a byte per nucleotide, with a specific binary encoding. We currently provide support for the matrix form of  DNAbin .  The  BioBridgeR.APE  provides a bitstype of  DNAbin  which inherits from the abstract type  NucleicAcid  from  BioSymbols.jl .  BioBridgeR.APE.DNAbin  variables then can be created and used to represent nucleic acid data, just as you can with the  DNA  and  RNA  defined in BioSymbols.jl. They work with the methods defined in BioSymbols.jl:  julia  using BioSequences, RCall, BioBridgeR.APE\nWARNING: Method definition promote_rule(Type{IntervalSets.ClosedInterval{T}}, Type{IntervalSets.ClosedInterval{S}}) in module IntervalSets at /home/travis/.julia/v0.6/IntervalSets/src/closed.jl:86 overwritten in module AxisArrays at /home/travis/.julia/v0.6/AxisArrays/src/intervals.jl:23.\nWARNING: Method definition ==(Base.Nullable{S}, Base.Nullable{T}) in module Base at nullable.jl:238 overwritten in module NullableArrays at /home/travis/.julia/v0.6/NullableArrays/src/operators.jl:128.\n\njulia  ispurine(DNAbin_A)\ntrue\n\njulia  complement(DNAbin_G)\nDNAbin_C  DNAbin  symbols can also be created from text and converted to text just as  DNA  and  RNA  symbols can be.  julia  DNAbin( t )\nDNAbin_T\n\njulia  Char(DNAbin_Gap) - : ASCII/Unicode U+002d (category Pd: Punctuation, dash)  DNAbin  symbols can also be created from text and converted to text just as  DNA  and  RNA  symbols can be.  julia  DNAbin(DNA_N)\nDNAbin_N\n\njulia  DNA(DNA_R)\nDNA_R  DNA sequences in R, represented as a  DNAbin  object can be transferred into a julia as an  Array{DNAbin,2} , or (by default) as a  BioSequence{DNAAlphabet{4}}  type as defined in  BioSequences.jl :  julia  R \n       library(ape)\n       data(woodmouse)\n        \nRCall.RObject{RCall.StrSxp}\n[1]  woodmouse \n\njulia  @rget woodmouse::Array{DNAbin,2}\n15\u00d7965 Array{BioBridgeR.APE.DNAbin,2}:\n DNAbin_N  DNAbin_T  DNAbin_T  DNAbin_C  \u2026  DNAbin_A  DNAbin_T  DNAbin_A\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_G  DNAbin_T  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_A  DNAbin_T  DNAbin_A\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C  \u2026  DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C  \u2026  DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_N  DNAbin_N  DNAbin_N  DNAbin_N     DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_A  DNAbin_T  DNAbin_T  DNAbin_C     DNAbin_N  DNAbin_N  DNAbin_N\n DNAbin_N  DNAbin_N  DNAbin_N  DNAbin_C     DNAbin_N  DNAbin_N  DNAbin_N\n\njulia  @rget woodmouse\n15-element Array{BioSequences.BioSequence{BioSequences.DNAAlphabet{4}},1}:\n NTTCGAAAAACACACCCACTACTAAAANTTATCAGTCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAGACCCTATA\n ATTCGAAAAACACACCCACTACTAAAAATTATCAACCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCTGTN\n ATTCGAAAAACACACCCACTACTAAAAATTATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCTATA\n ATTCGAAAAACACACCCACTACTAAAAATCATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAATACNNNN\n ATTCGAAAAACACACCCACTACTAAAAATTATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n ATTCGAAAAACACACCCACTACTAAAAATTATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n ATTCGAAAAACACACCCACTACTAAAAATTATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n ATTCGAAAAACACACCCACTACTAAAAATTATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n ATTCGAAAAACACACCCACTACTAAAAATTATCAACCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n ATTCGAAAAACACACCCACTACTAAAAATTATTAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n ATTCGAAAAACACACCCACTACTAAAAATTATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n ATTCGAAAAACACACCCACTACTAAAAATTATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n ATTCGAAAAACACACCCACTACTAAAAATTATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN\n NNNCGAAAAACACACCCACTACTAAAAATTATCAATCAC\u2026ACGCAGCCTAATATTCCGCCCAATTACTCAAACCCNNNN  Conversely,  Array{DNAbin, 2}  and  BioSequence{DNAAlphabet{4}}  variables can be transferred over from the julia session to the R session as a  DNAbin  object. Note that currently you have to explicitly specify that it must be converted to a  RawSxp  (the structure R uses to store binary data as  DNAbin  does, indeed  DNAbin  variables are arrays of bytes with specific behaviour).  julia   sequences   =   DNASequence [ dna AAAAA ,   dna TTTTT ,   dna CCCCC ,   dna GGGGG ]  4 - element   Array { BioSequences . BioSequence { BioSequences . DNAAlphabet { 4 }}, 1 } : \n  AAAAA \n  TTTTT \n  CCCCC \n  GGGGG  julia   @ rput   sequences :: RawSxp  Ptr { RCall . RawSxp }   @0x00000000070d14c8  julia   R sequences  RCall . RObject { RCall . RawSxp }  4   DNA   sequences   in   binary   format   stored   in   a   matrix .  All   sequences   of   same   length :   5  Labels :  Base   composition : \n    a      c      g      t  0.25   0.25   0.25   0.25", 
            "title": "DNAbin"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing\n\n\nWe appreciate contributions from users including reporting bugs, fixing issues, improving performance and adding new features.\n\n\nIf you have a question about contributing or using this package, you are encouraged to use the \nBio category of the Julia discourse site\n.\n\n\nDetailed guidance for contributing to all BioJulia packages is provided at the \nBioJulia Contribution Documentation\n.\n\n\nHere we list specific details about contributing and maintainership pertaining specifically to the BioBridgeR.jl package.\n\n\n\n\nNamed maintainers\n\n\nThe named maintainers of this package is Ben Ward. It is their responsibility to make final choices about pull requests and issues, although because of our community structure, you will find other maintainers assisting them.\n\n\n\n\nBranching model\n\n\nThe branching model used to develop and make releases of this package is the \nOneFlow\n model summarized in the \nBioJulia Contribution Documentation", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing", 
            "text": "We appreciate contributions from users including reporting bugs, fixing issues, improving performance and adding new features.  If you have a question about contributing or using this package, you are encouraged to use the  Bio category of the Julia discourse site .  Detailed guidance for contributing to all BioJulia packages is provided at the  BioJulia Contribution Documentation .  Here we list specific details about contributing and maintainership pertaining specifically to the BioBridgeR.jl package.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#named-maintainers", 
            "text": "The named maintainers of this package is Ben Ward. It is their responsibility to make final choices about pull requests and issues, although because of our community structure, you will find other maintainers assisting them.", 
            "title": "Named maintainers"
        }, 
        {
            "location": "/contributing/#branching-model", 
            "text": "The branching model used to develop and make releases of this package is the  OneFlow  model summarized in the  BioJulia Contribution Documentation", 
            "title": "Branching model"
        }
    ]
}